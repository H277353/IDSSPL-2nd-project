package com.project2.ism.Model.Product;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.project2.ism.enums.ProductCategory;
import com.project2.ism.enums.ProductStatus;
import com.project2.ism.enums.WarrantyType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "products",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "product_code")
        })
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Product name must be at least 2 characters")
    @Size(min = 2, message = "Product name must be at least 2 characters")
    @Column(name = "product_name", nullable = false, length = 255)
    private String productName;

    @NotBlank(message = "Product code must be at least 3 characters")
    @Size(min = 3, message = "Product code must be at least 3 characters")
    @Column(name = "product_code", nullable = false, unique = true, length = 50)
    private String productCode;

    @NotBlank(message = "Please select a vendor")
    @Column(name = "vendor_id", nullable = false)
    private String vendorId;

    @NotNull(message = "Please select a category")
    @Enumerated(EnumType.STRING)
    @Column(name = "category", nullable = false)
    private ProductCategory category;

    @NotBlank(message = "Model is required")
    @Size(min = 2, message = "Model is required")
    @Column(name = "model", nullable = false, length = 100)
    private String model;

    @NotBlank(message = "Brand is required")
    @Size(min = 2, message = "Brand is required")
    @Column(name = "brand", nullable = false, length = 100)
    private String brand;

    @NotBlank(message = "Description must be at least 10 characters")
    @Size(min = 10, message = "Description must be at least 10 characters")
    @Column(name = "description", nullable = false, columnDefinition = "TEXT")
    private String description;

    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JsonManagedReference
    private List<ProductSpecification> specifications;

    @Min(value = 0, message = "Warranty period must be 0 or more months")
    @Column(name = "warranty_period", nullable = false)
    private Integer warrantyPeriod;

    @NotNull(message = "Warranty type is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "warranty_type", nullable = false)
    private WarrantyType warrantyType;

    @NotBlank(message = "HSN must be 4-8 digits")
    @Pattern(regexp = "^[0-9]{4,8}$", message = "HSN must be 4-8 digits")
    @Column(name = "hsn", nullable = false, length = 8)
    private String hsn;

    @NotNull(message = "Status is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private ProductStatus status;

    @Min(value = 1, message = "Minimum order quantity must be at least 1")
    @Column(name = "min_order_quantity", nullable = false)
    private Integer minOrderQuantity;

    @Min(value = 1, message = "Maximum order quantity must be at least 1")
    @Column(name = "max_order_quantity", nullable = false)
    private Integer maxOrderQuantity;

    @Column(name = "remarks", columnDefinition = "TEXT")
    private String remarks;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    // Default constructor
    public Product() {}

    // Constructor with required fields
    public Product(String productName, String productCode, String vendorId,
                   ProductCategory category, String model, String brand, String description,
                   Integer warrantyPeriod, WarrantyType warrantyType, String hsn,
                   ProductStatus status, Integer minOrderQuantity, Integer maxOrderQuantity) {
        this.productName = productName;
        this.productCode = productCode;
        this.vendorId = vendorId;
        this.category = category;
        this.model = model;
        this.brand = brand;
        this.description = description;
        this.warrantyPeriod = warrantyPeriod;
        this.warrantyType = warrantyType;
        this.hsn = hsn;
        this.status = status;
        this.minOrderQuantity = minOrderQuantity;
        this.maxOrderQuantity = maxOrderQuantity;
    }

    // Getters and setters will be generated by IntelliJ

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public String getProductCode() {
        return productCode;
    }

    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }

    public String getVendorId() {
        return vendorId;
    }

    public void setVendorId(String vendorId) {
        this.vendorId = vendorId;
    }

    public ProductCategory getCategory() {
        return category;
    }

    public void setCategory(ProductCategory category) {
        this.category = category;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public List<ProductSpecification> getSpecifications() {
        return specifications;
    }

    public void setSpecifications(List<ProductSpecification> specifications) {
        this.specifications = specifications;
    }

    public Integer getWarrantyPeriod() {
        return warrantyPeriod;
    }

    public void setWarrantyPeriod(Integer warrantyPeriod) {
        this.warrantyPeriod = warrantyPeriod;
    }

    public WarrantyType getWarrantyType() {
        return warrantyType;
    }

    public void setWarrantyType(WarrantyType warrantyType) {
        this.warrantyType = warrantyType;
    }

    public String getHsn() {
        return hsn;
    }

    public void setHsn(String hsn) {
        this.hsn = hsn;
    }

    public ProductStatus getStatus() {
        return status;
    }

    public void setStatus(ProductStatus status) {
        this.status = status;
    }

    public Integer getMinOrderQuantity() {
        return minOrderQuantity;
    }

    public void setMinOrderQuantity(Integer minOrderQuantity) {
        this.minOrderQuantity = minOrderQuantity;
    }

    public Integer getMaxOrderQuantity() {
        return maxOrderQuantity;
    }

    public void setMaxOrderQuantity(Integer maxOrderQuantity) {
        this.maxOrderQuantity = maxOrderQuantity;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    // Custom validation method
    @PrePersist
    @PreUpdate
    private void validateOrderQuantities() {
        if (maxOrderQuantity != null && minOrderQuantity != null &&
                maxOrderQuantity < minOrderQuantity) {
            throw new IllegalArgumentException("Maximum order quantity cannot be less than minimum order quantity");
        }
    }


}